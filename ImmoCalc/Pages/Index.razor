@page "/"
@using ImmoCalc.Stores.Projects
@inherits BlazorState.BlazorStateComponent
@inject NavigationManager Navigation;

<ion-header translucent>
    <ion-toolbar mode="ios">
        <ion-title>Mes projets</ion-title>
    </ion-toolbar>
</ion-header>

<ion-content>

    @if (State.ProjectListLoading) {
        <ion-list>
            @for (int i = 0; i < 10; i++) {
                <ion-item-sliding>
                    <ion-item detail button @onclick="@Clicked">
                        @*<ion-icon slot="start" name="home-outline"></ion-icon>*@
                        <ion-thumbnail slot="start">
                            <ion-skeleton-text animated></ion-skeleton-text>
                        </ion-thumbnail>
                        <ion-label>
                            <h2><ion-skeleton-text animated style="width: 35%"></ion-skeleton-text></h2>
                            <h3><ion-skeleton-text animated style="width: 70%"></ion-skeleton-text></h3>
                        </ion-label>
                    </ion-item>
                    <ion-item-options side="end">
                        <ion-item-option color="tertiary">Rename</ion-item-option>
                        <ion-item-option color="danger">Remove</ion-item-option>
                    </ion-item-options>
                </ion-item-sliding>
            }
        </ion-list>
    }
    else {
        <IonRefresher OnRefresh="Load"></IonRefresher>
        <ion-list>
            @foreach (var project in State.ProjectList) {
                <ion-item-sliding>
                    <ion-item detail button @onclick="@Clicked">
                        <ion-icon slot="start" name="home-outline"></ion-icon>
                        <ion-label>
                            <h2>@project.Label</h2>
                            <h3>@project.Address</h3>
                        </ion-label>
                    </ion-item>
                    <ion-item-options side="end">
                        <ion-item-option color="tertiary">Rename</ion-item-option>
                        <ion-item-option color="danger">Remove</ion-item-option>
                    </ion-item-options>
                </ion-item-sliding>
            }
        </ion-list>
    }

    <ion-fab slot="fixed" vertical="bottom" horizontal="end">
        <ion-fab-button @onclick="@Load">
            <ion-icon name="add"></ion-icon>
        </ion-fab-button>
    </ion-fab>
</ion-content>

@code
{
    private ProjectsState State => Store.GetState<ProjectsState>();

    private void Clicked() {
        Navigation.NavigateTo("simulator");
    }

    protected override void OnInitialized()
    {
        Subscriptions.Add<ProjectsState>(this);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Mediator.Send(new ProjectsState.LoadProjectList(true));

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        await Mediator.Send(new ProjectsState.LoadProjectList());
    }
}

