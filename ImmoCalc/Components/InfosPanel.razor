@inherits BlazorState.BlazorStateComponent
@using System.Data.Common
@using ImmoCalc.Components.Converters
@using ImmoCalc.Domain
@using ImmoCalc.Stores.CurrentProject
@using MediatR

<div class="card">
    @CardHeader("Informations d'achat", "bg-primary", "fa-house-damage")
    <div class="card-body" style="padding: 1px;">
        <Grid ColumnGap="3" RowGap="3">
            <RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </RowDefinitions>
            <ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </ColumnDefinitions>
            <Content>
                <DataInput Row="1" Label="Prix d'achat" ShowCents="@false" @bind-Value="@_buyingPrice.Value" Converter="@_buyingPrice.Converter"/>
                <DataInput Row="2" Label="Loyer mensuel" @bind-Value="@_monthlyRent.Value" Converter="@_monthlyRent.Converter"/>
                <DataInput Row="3" Label="Charges" @bind-Value="@_charges.Value" Converter="@_charges.Converter">
                    <AfterLabel>
                        <div class="row">
                            <label>incluses</label>
                            @*<Switch Checked="@IncludedCharges" OnChange="OnIncludedChargesChange" />*@
                        </div>
                        
                    </AfterLabel>
                </DataInput>
                <DataInput Row="4" Label="Surface" Currency="m²" @bind-Value="@_surface.Value" Converter="@_surface.Converter"/>
                <DataInput Row="5" Label="Taxe foncière" Currency="€/an" @bind-Value="@_propertyTax.Value" Converter="@_propertyTax.Converter"/>
                <DataInput Row="6" Label="Travaux" Currency="€" @bind-Value="@_renovation.Value" Converter="@_renovation.Converter"/>
            </Content>
        </Grid>
    </div>
    
    @CardHeader("Banque", "bg-info", "fa-bank")
    <div class="card-body" style="padding: 1px;">
        <Grid>
            <ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </ColumnDefinitions>
            <RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </RowDefinitions>
            <Content>
                <DataInput Row="1" Label="Durée du prêt" Currency="ans" @bind-Value="@_loanDuration.Value" Converter="@_loanDuration.Converter" ShowCents="@false" />
                <DataInput Row="2" Label="Taux du prêt" Currency="%" @bind-Value="@_loanRate.Value" Converter="@_loanRate.Converter" />
                <DataInput Row="3" Label="Taux assurance" Currency="%" @bind-Value="@_insuranceRate.Value" Converter="@_insuranceRate.Converter" />
                <DataOutput Row="4" Label="Frais de notaire" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.NotaryFees))">
                    <AfterLabel>
                        <div class="row">
                            <label>inclus</label>
                            @*<Switch Checked="@IncludedNotaryFees" OnChange="OnIncludedNotaryFeesChange" />*@
                        </div>
                    </AfterLabel>
                </DataOutput>
                <GridElement Row="5" Column="1" HorizontalAlignment="@Alignment.End" VerticalAlignment="@Alignment.Center">
                    <label>Inclure les travaux :</label>
                </GridElement>
                <GridElement Row="5" Column="2" HorizontalAlignment="@Alignment.Start" VerticalAlignment="@Alignment.Center">
                    @*<Switch Checked="IncludedRenovation" OnChange="OnIncludedRenovatioChange" />*@
                </GridElement>
                <DataOutput Row="6" Label="Montant de l'emprunt" Currency="€" Value="@((string)_amountToStringConverter.Convert(State.Project.LoanAmount) )"/>
                <DataOutput Row="7" Label="Apport" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.Contribution))" />

            </Content>
        </Grid>
    </div>
    
    @CardHeader("Calculs", "bg-success", "fa-calculator")
<div class="card-body" style="padding: 1px;">
    <Grid>
        <ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
        </ColumnDefinitions>
        <RowDefinitions>
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
        </RowDefinitions>
        <Content>
           
            <DataOutput Row="1" Label="Cout total" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.PropertyTotalCost))" />
            <DataOutput Row="2" Label="Prix au m2" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.SquareMeterPrice))" />
            <DataOutput Row="3" Label="Revenu" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.MonthlyIncome))" />
            <DataOutput Row="4" Label="Mensualité" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.TotalMonthlyPayment))" />
            <DataOutput Row="5" Label="Gain mensuel" Currency="€" Value="@((string) _amountToStringConverter.Convert(State.Project.MonthlyGain))" />
            <DataOutput Row="6" Label="Rentabilite" Currency="%" Value="@((string) _ratioToStringConverter.Convert(State.Project.Profitability))" />
            <DataOutput Row="7" Label="Score" Currency="/10" Value="@((string) _amountToStringConverter.Convert(State.Project.Score))" />

        </Content>
    </Grid>
</div>
</div>

@code {

    private CurrentProjectState State => Store.GetState<CurrentProjectState>();

    private AmountProperty<BuyingPrice> _buyingPrice;
    private AmountProperty<MonthlyRent> _monthlyRent;
    private AmountProperty<Charges> _charges;
    private AmountProperty<Surface> _surface;
    private AmountProperty<PropertyTax> _propertyTax;
    private AmountProperty<Renovation> _renovation;

    private AmountProperty<LoanDuration> _loanDuration;
    private RatioProperty<LoanRate> _loanRate;
    private RatioProperty<InsuranceRate> _insuranceRate;

    private bool IncludedCharges => State.Project.Charges.IsIncludedInMonthlyRent;
    private void OnIncludedChargesChange(bool value) => Mediator.Send(new CurrentProjectState.IncludeChargesInMonthlyRent(value));

    private bool IncludedNotaryFees => State.Project.NotaryFees.IsIncludedInLoadAmount;
    private void OnIncludedNotaryFeesChange(bool value) => Mediator.Send(new CurrentProjectState.IncludeNotaryFeesInLoadAmount(value));

    private bool IncludedRenovation => State.Project.Renovation.IsIncludedInLoadAmount;
    private void OnIncludedRenovatioChange(bool value) => Mediator.Send(new CurrentProjectState.IncludeRenovationInLoadAmount(value));

    protected override void OnInitialized()
{
        _buyingPrice = new AmountProperty<BuyingPrice>(Mediator, BuyingPrice.From, ()=> State.Project.BuyingPrice);
        _monthlyRent = new AmountProperty<MonthlyRent>(Mediator, MonthlyRent.From, () => State.Project.MonthlyRent);
        _charges = new AmountProperty<Charges>(Mediator, Charges.From, () => State.Project.Charges);
        _surface = new AmountProperty<Surface>(Mediator, Surface.From, () => State.Project.Surface);
        _propertyTax = new AmountProperty<PropertyTax>(Mediator, PropertyTax.From, () => State.Project.PropertyTax);
        _renovation = new AmountProperty<Renovation>(Mediator, Renovation.From, () => State.Project.Renovation);

        _loanDuration = new AmountProperty<LoanDuration>(Mediator,a=> LoanDuration.From((int)a), () => State.Project.LoanDuration);
        _loanRate = new RatioProperty<LoanRate>(Mediator, LoanRate.From, ()=>State.Project.LoanRate);
        _insuranceRate = new RatioProperty<InsuranceRate>(Mediator, InsuranceRate.From, ()=>State.Project.InsuranceRate);
    }


    private readonly AmountToStringConverter _amountToStringConverter = new AmountToStringConverter();
    private readonly RatioToStringConverter _ratioToStringConverter = new RatioToStringConverter();

    private RenderFragment CardHeader(string title, string color, string icon)
        => @<div class="card-header border rounded shadow-sm @color" style="padding: 1px;">
               <div class="row text-left">
                   <div class="col-auto"><i class="fas @icon"></i></div>
                   <div class="col">
                       <h5 class="text-white mb-0">@title</h5>
                   </div>
               </div>
           </div>;



}
